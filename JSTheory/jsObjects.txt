
let user1=new Object(); // "object constructor" syntax

let user2={}; // "object literal" syntax

let user3={
    name:"abc",
    age:20
};  

console.log(user3.age);

user3.isAdmin=true;

delete user3.age;

user3["multiword attribute"]=20;

// ----------------------------------------

let fruit = prompt("Which fruit to buy?", "apple");

let bag = {
  [fruit]: 5, // the name of the property is taken from the variable fruit
};

alert( bag.apple ); // 5 if fruit="apple"

---------------------------------

One of the fundamental differences of objects versus primitives is that 
objects are stored and copied “by reference”, whereas 
primitive values: strings, numbers, booleans, etc – are always copied “as a whole value”.


https://javascript.info/object-copy

let user = {
  name: "John"
};
A variable assigned to an object stores not the object itself, but its “address in memory” – in other words “a reference” to it.
The object is stored somewhere in memory (at the right of the picture), while the user variable (at the left) has a “reference” to it.


When an object variable is copied, the reference is copied, but the object itself is not duplicated.

For instance:

let user = { name: "John" };
let admin = user; // copy the reference
-----------------------------------------
let user = { name: 'John' };

let admin = user;

admin.name = 'Pete'; // changed by the "admin" reference

alert(user.name); // 'Pete', changes are seen from the "user" reference
--------------------------------------------


let a = {};
let b = a; // copy the reference

alert( a == b ); // true, both variables reference the same object
alert( a === b ); // true

------------------------------------------

let a = {};
let b = {}; // two independent objects

alert( a == b ); // false
------------------------------------------
const objects can be modified
The value of user is constant, it must always reference the same object, but properties of that object are free to change.

-------------------------------------------
TO MAKE COPY OF AN OBJECT
let user = {
  name: "John",
  age: 30
};

let clone = {}; // the new empty object

// let's copy all user properties into it
for (let key in user) {
  clone[key] = user[key];
}

// now clone is a fully independent object with the same content
clone.name = "Pete"; // changed the data in it

alert( user.name ); // still John in the original object
------------------------------------------

READ ABOUT CLONING/NESTED CLONING/ STRUCTURED CLONING

-----------------------------------------

“this” is not bound
In JavaScript, keyword this behaves unlike most other programming languages. It can be used in any function, even if it’s not a method of an object.

There’s no syntax error in the following example:

function sayHi() {
  alert( this.name );
}


The value of this is evaluated during the run-time, depending on the context.
=========================================

https://javascript.info/symbol

--------------------------------------
An array is a special kind of object. The square brackets used to access a property arr[0] actually come from the object syntax. 
That’s essentially the same as obj[key], where arr is the object, while numbers are used as keys.
https://javascript.info/array-methods






